{"version":3,"sources":["../../../src/js/args/help.js"],"names":["name","config","firstBig","word","charAt","toUpperCase","substr","parts","groups","options","examples","group","details","length","optionHandle","value","push","printMainColor","printSubColor","generateExamples","generateDetails","output","part","join","usageFilter","console","log"],"mappings":"yUAAe,UAAY,IACjBA,KADiB,CACR,KAAKC,MADG,CACjBD,IADiB,CAEnBE,SAAW,qBAAQC,MAAKC,MAAL,CAAY,CAAZ,EAAeC,WAAf,GAA+BF,KAAKG,MAAL,CAAY,CAAZ,CAAvC,CAFQ,CAInBC,MAAQ,EAJW,CAMnBC,OAAS,CACbC,UADa,CAEbC,WAFa,CANU,CAWzB,IAAK,GAAMC,MAAX,GAAoBH,OAApB,CACmC,CAA7B,MAAKI,OAAL,CAAaD,KAAb,EAAoBE,MAD1B,GAKEL,OAAOG,KAAP,IALF,EAQA,GAAMG,cAAeN,OAAOC,OAAP,CAAiB,YAAjB,CAAgC,EAArD,CACMM,MAAqC,QAA7B,QAAO,MAAKd,MAAL,CAAYc,KAAnB,KACN,KAAKd,MAAL,CAAYc,KADN,CAEV,EAHJ,CAWA,IAAK,GAAMJ,OAAX,GANAJ,OAAMS,IAAN,CAAW,CACT,EADS,WAEC,KAAKC,cAAL,CAAoBjB,IAApB,CAFD,KAE8B,KAAKkB,aAAL,CAAmBJ,aAAeC,KAAlC,CAF9B,CAGT,EAHS,CAAX,CAMA,CAAoBP,MAApB,CACOA,OAAOG,MAAP,CADP,GAKEJ,MAAMS,IAAN,CAAW,CAAC,EAAD,CAAQd,SAASS,MAAT,CAAR,KAA4B,EAA5B,CAAgC,EAAhC,CAAX,CALF,CAOgB,UAAV,QAPN,CAQIJ,MAAMS,IAAN,CAAW,KAAKG,gBAAL,EAAX,CARJ,CAUIZ,MAAMS,IAAN,CAAW,KAAKI,eAAL,CAAqBT,MAArB,CAAX,CAVJ,CAaEJ,MAAMS,IAAN,CAAW,CAAC,EAAD,CAAK,EAAL,CAAX,CAbF,EAgBA,GAAIK,QAAS,EAAb,yEA9CyB,IAiDzB,cAAWC,IAAX,WAAmBf,KAAnB,4GAAWe,IAAX,aACED,QAAUC,KAAKC,IAAL,CAAU,MAAV,CAlDa,oLAqDpBf,OAAOC,OArDa,GAsDvBY,OAAS,sBAtDc,KAyDjBG,YAzDiB,CAyDD,KAAKvB,MAzDJ,CAyDjBuB,WAzDiB,CA4DE,UAAvB,QAAOA,YA5Dc,GA6DvBH,OAASG,YAAYH,MAAZ,GAAuBA,MA7DT,EAgEzBI,QAAQC,GAAR,CAAYL,MAAZ,CACD,C","file":"help.js","sourcesContent":["export default function () {\n  const { name } = this.config;\n  const firstBig = word => word.charAt(0).toUpperCase() + word.substr(1);\n\n  const parts = [];\n\n  const groups = {\n    options: true,\n    examples: true,\n  };\n\n  for (const group in groups) {\n    if (this.details[group].length > 0) {\n      continue; // eslint-disable-line\n    }\n\n    groups[group] = false;\n  }\n\n  const optionHandle = groups.options ? '[options] ' : '';\n  const value = typeof this.config.value === 'string'\n    ? ` ${this.config.value}`\n    : '';\n\n  parts.push([\n    '',\n    `Usage: ${this.printMainColor(name)} ${this.printSubColor(optionHandle + value)}`,\n    '',\n  ]);\n\n  for (const group in groups) {\n    if (!groups[group]) {\n      continue; // eslint-disable-line\n    }\n\n    parts.push(['', `${firstBig(group)}:`, '', '']);\n\n    if (group === 'examples') {\n      parts.push(this.generateExamples());\n    } else {\n      parts.push(this.generateDetails(group));\n    }\n\n    parts.push(['', '']);\n  }\n\n  let output = '';\n\n  // And finally, merge and output them\n  for (const part of parts) {\n    output += part.join('\\n  ');\n  }\n\n  if (!groups.options) {\n    output = 'No options available';\n  }\n\n  const { usageFilter } = this.config;\n\n  // If filter is available, pass usage information through\n  if (typeof usageFilter === 'function') {\n    output = usageFilter(output) || output;\n  }\n\n  console.log(output); // eslint-disable-line\n}\n"]}