{"version":3,"sources":["../../../src/js/args/option.js"],"names":["name","description","defaultValue","init","usage","assignShort","n","options","short","find","flagName","charAt","toUpperCase","constructor","String","details","Array","concat","Error","length","optionDetails","filter","item","defaultIsWrong","handleType","push"],"mappings":"2UAAe,SAAUA,IAAV,CAAgBC,WAAhB,CAA6BC,YAA7B,CAA2CC,IAA3C,CAAiD,CAC9D,GAAIC,OAAQ,EAAZ,CAEMC,YAAc,SAACC,CAAD,CAAIC,OAAJ,CAAaC,KAAb,CAAuB,CAIzC,MAHID,SAAQE,IAAR,CAAa,yBAAYC,UAASN,KAAT,CAAe,CAAf,IAAsBI,KAAlC,CAAb,CAGJ,GAFEA,MAAQF,EAAEK,MAAF,CAAS,CAAT,EAAYC,WAAZ,EAEV,EAAO,CAACJ,KAAD,CAAQF,CAAR,CACR,CAPD,CAWA,OAAQN,KAAKa,WAAb,EACE,IAAKC,OAAL,CACEV,MAAQC,YAAYL,IAAZ,CAAkB,KAAKe,OAAL,CAAaR,OAA/B,CAAwCP,KAAKW,MAAL,CAAY,CAAZ,CAAxC,CADV,CAEE,MACF,IAAKK,MAAL,CACEZ,MAAQA,MAAMa,MAAN,CAAajB,IAAb,CADV,CAEE,MACF,QACE,KAAM,IAAIkB,MAAJ,CAAU,yBAAV,CAAN,CARJ,CAYA,GAAmB,CAAf,OAAMC,MAAN,EAAsC,CAAlB,OAAM,CAAN,EAASA,MAAjC,CACE,KAAM,IAAID,MAAJ,CAAU,+CAAV,CAAN,CAGF,GAAME,eAAgB,CACpBlB,yBADoB,CAEpBE,WAFoB,CAGpBH,uBAHoB,CAAtB,CAMA,GAA+E,CAA3E,QAAKc,OAAL,CAAaR,OAAb,CAAqBc,MAArB,CAA4B,qBAAQC,MAAKlB,KAAL,CAAW,CAAX,IAAkBA,MAAM,CAAN,CAA1B,CAA5B,EAAgEe,MAApE,CAAkF,CAChF,GAAII,eAAJ,CAiBA,GAbIA,cAaJ,MAfQrB,YAeR,EAXO,IAWP,GAfQA,YAeR,WAfQA,YAeR,CAAI,CAACqB,cAAL,CAAqB,CAEnBH,cAAcjB,IAAd,CADqC,UAAhB,QAAOA,KACP,CAAeA,IAAf,CAAsB,KAAKqB,UAAL,CAAgBtB,YAAhB,EAA8B,CAA9B,CAC5C,CAGD,KAAKa,OAAL,CAAaR,OAAb,CAAqBkB,IAArB,CAA0BL,aAA1B,CACD,CAGD,MAAO,KACR,C","file":"option.js","sourcesContent":["export default function (name, description, defaultValue, init) {\n  let usage = [];\n\n  const assignShort = (n, options, short) => {\n    if (options.find(flagName => flagName.usage[0] === short)) {\n      short = n.charAt(0).toUpperCase(); // eslint-disable-line no-param-reassign\n    }\n    return [short, n];\n  };\n\n  // If name is an array, pick the values\n  // Otherwise just use the whole thing\n  switch (name.constructor) {\n    case String:\n      usage = assignShort(name, this.details.options, name.charAt(0));\n      break;\n    case Array:\n      usage = usage.concat(name);\n      break;\n    default:\n      throw new Error('Invalid name for option');\n  }\n\n  // Throw error if short option is too long\n  if (usage.length > 0 && usage[0].length > 1) {\n    throw new Error('Short version of option is longer than 1 char');\n  }\n\n  const optionDetails = {\n    defaultValue,\n    usage,\n    description,\n  };\n\n  if (this.details.options.filter(item => item.usage[1] === usage[1]).length === 0) {\n    let defaultIsWrong;\n\n    switch (defaultValue) {\n      case false:\n        defaultIsWrong = true;\n        break;\n      case null:\n        defaultIsWrong = true;\n        break;\n      case undefined:\n        defaultIsWrong = true;\n        break;\n      default:\n        defaultIsWrong = false;\n    }\n\n    // Set initializer depending on type of default value\n    if (!defaultIsWrong) {\n      const initFunction = typeof init === 'function';\n      optionDetails.init = initFunction ? init : this.handleType(defaultValue)[1];\n    }\n\n    // Register option to global scope\n    this.details.options.push(optionDetails);\n  }\n\n  // Allow chaining of .option()\n  return this;\n}\n"]}