{"version":3,"sources":["../../../src/js/args/parse.js"],"names":["argv","options","Object","assign","config","help","option","command","showHelp","raw","slice","minimist","version","checkVersion","parent","subCommand","_","helpTriggered","h","args","defined","isDefined","optionList","getOptions","shift","sub","runCommand"],"mappings":"mYAEe,SAAUA,IAAV,CAAgBC,OAAhB,CAAyB,CAEtCC,OAAOC,MAAP,CAAc,KAAKC,MAAnB,CAA2BH,OAA3B,CAFsC,CAIlC,KAAKG,MAAL,CAAYC,IAJsB,GAMpC,KAAKC,MAAL,CAAY,MAAZ,CAAoB,0BAApB,CANoC,CAOpC,KAAKC,OAAL,CAAa,MAAb,CAAqB,cAArB,CAAqC,KAAKC,QAA1C,CAPoC,EAWtC,KAAKC,GAAL,CAAW,uBAAOT,KAAKU,KAAL,CAAW,CAAX,CAAP,CAAsB,KAAKN,MAAL,CAAYO,QAAlC,CAX2B,CAclC,KAAKP,MAAL,CAAYQ,OAdsB,EAepC,KAAKC,YAAL,CAAkB,KAAKC,MAAvB,CAfoC,CAkBtC,GAAMC,YAAa,KAAKN,GAAL,CAASO,CAAT,CAAW,CAAX,CAAnB,CACMC,cAAgB,KAAKR,GAAL,CAASS,CAAT,EAAc,KAAKT,GAAL,CAASJ,IAD7C,CAGMc,KAAO,EAHb,CAIMC,QAAU,KAAKC,SAAL,CAAeN,UAAf,CAA2B,UAA3B,CAJhB,CAKMO,WAAa,KAAKC,UAAL,CAAgBH,OAAhB,CALnB,CAlBsC,OAyBtClB,OAAOC,MAAP,CAAcgB,IAAd,CAAoB,KAAKV,GAAzB,CAzBsC,CA0BtCU,KAAKH,CAAL,CAAOQ,KAAP,EA1BsC,CA6BtC,KAAKC,GAAL,CAAWN,KAAKH,CA7BsB,CAgClCI,OAhCkC,GAiCpC,KAAKM,UAAL,CAAgBN,OAAhB,CAAyBE,UAAzB,CAjCoC,CAkC7B,EAlC6B,GAuClC,KAAKlB,MAAL,CAAYC,IAAZ,EAAoBY,aAvCc,EAwCpC,KAAKT,QAAL,EAxCoC,CA4C/Bc,UA5C+B,CA6CvC,C","file":"parse.js","sourcesContent":["import parser from 'minimist';\n\nexport default function (argv, options) {\n  // Override default option values\n  Object.assign(this.config, options);\n\n  if (this.config.help) {\n    // Register default options and commands\n    this.option('help', 'Output usage information');\n    this.command('help', 'Display help', this.showHelp);\n  }\n\n  // Parse arguments using minimist\n  this.raw = parser(argv.slice(1), this.config.minimist);\n\n  // If default version is allowed, check for it\n  if (this.config.version) {\n    this.checkVersion(this.parent);\n  }\n\n  const subCommand = this.raw._[1];\n  const helpTriggered = this.raw.h || this.raw.help;\n\n  const args = {};\n  const defined = this.isDefined(subCommand, 'commands');\n  const optionList = this.getOptions(defined);\n\n  Object.assign(args, this.raw);\n  args._.shift();\n\n  // Export sub arguments of command\n  this.sub = args._;\n\n  // If sub command is defined, run it\n  if (defined) {\n    this.runCommand(defined, optionList);\n    return {};\n  }\n\n  // Show usage information if \"help\" or \"h\" option was used\n  // And respect the option related to it\n  if (this.config.help && helpTriggered) {\n    this.showHelp();\n  }\n\n  // Hand back list of options\n  return optionList;\n}\n"]}